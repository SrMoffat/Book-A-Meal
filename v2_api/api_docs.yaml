swagger: '2.0'
info:
  version: '2.0'
  title: Book-A-Meal
  description: >-
    Book-A-Meal is an application that allows customers to make food orders and helps the food vendor know what the customers want to eat
  license:
    name: MIT
    url: 'https://github.com/SrMoffat/Book-A-Meal/blob/master/LICENSE'

basePath: /api/v1
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json
paths:
  /auth/signup:
    x-summary: Registers a user.
    post:
      summary: Registration of new user 
      description: >-
        Takes user credentials. Checks them against the database. If credentials don't exist, it creates a new user account (default=customer).
      parameters:
        - in: body
          name: User
          description: The user details.
          required: false
          schema:
            $ref: '#/definitions/Register'
      responses:
        '201':
          description: 'User successfully registered!'
        '400':
          description: 'The user already exists!'
      tags:
        - Auth
  /auth/login:
    x-summary: Login
    post:
      summary: Logs in an authenticated user
      description: Check if provided credentials are valid, once authenticated the user is logged in 
      parameters:
        - in: body
          name: Login
          description: The user to login.
          required: false
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: 'Successful authentication!'
        '400':
          description: 'Invalid password'
        '404':
          description: 'User does not exist!'
       
      tags:
        - Auth
  /meals:
    x-summary: Meals
    post:
      summary: Admin(Caterer) can add a new meal
      description: Logged in admin (Caterer) can add a new meal
      parameters:
        - in: body
          name: Meals
          description: Meal details
          schema:
            $ref: '#/definitions/AddMeal'
        - name: access-token
          in: header
          description: Auth token in header
          required: true
          type: string
      responses:
        '201':
          description: 'Meal has been successfully created!'
        '400':
          description: 'Meal already exists'
      tags:
        - Meals
    get:
      summary: Admin(Caterer) can get all meals
      description: Logged in admin (Caterer) can get all current meals
      parameters:
        - name: access-token
          in: header
          description: Auth token in header
          required: true
          type: string
      responses:
        '200':
          description: 'All existing meals'
        '404':
          description: 'There are no existing meals yet'
      tags:
        - Meals
    
        
  /meals/<mealid>:
    x-summary: Meals
    put:
      summary: Admin(Caterer) can update meal details
      description: Logged in admin (Caterer) can edit an existing meal
      parameters:
        - in: body
          name: Meal
          description: Details of meal
          schema:
            $ref: '#/definitions/EditMeal'
        - name: access-token
          in: header
          description: Auth token in header
          required: true
          type: string
      responses:
        '200':
          description: 'Meal successfully updated!'
        '400':
          description: 'Meal already exists'
      tags:
        - Meals   
        
  /meal/<mealid>:
    x-summary: Meals
    delete:
      summary: Admin(Caterer) can removee meal details
      description: Logged in admin (Caterer) can delete an existing meal
      parameters:
      - name: Authorization
        in: header
        description: Access token required
        required: true
        type: string
      - name: mealid
        in: path
        description: Id of meal to be deleted
        required: true
        type: number
      responses:
        200:
          description: Meal successfully deleted
        401:
          description: User is not an admin
        404:
          description: Meal with id provided was not found
      tags:
        - Meals    
  
  
         
  /menu:
    x-summary: Menu
    get:
      summary: Get menu for the day.
      description: Logged in user can get menu for the day.
      parameters:
        - name: access-token
          in: header
          description: Auth token in header
          required: true
          type: string
      responses:
        '200':          
          description: 'A list of meals'
        '404':
          description: 'Menu not set!'
      tags:
        - Menu   
    post:
      summary: Set menu for the day.
      description: Admin(caterer) sets the menu for the day.
      parameters:
        - in: body
          name: Meal
          description: Mmeal to be added.
          schema:
            $ref: '#/definitions/SetMenu'
        - name: access-token
          in: header
          description: Auth token in header
          required: true
          type: string
      responses:
        '201':
          description: 'Menu successfully added!'
        '400':
          description: 'Empty menus are not allowed'
        '404':
          description: 'Meal option cannot be found!'
        '409':
          description: 'Meal item already exists in menu!'
      tags:
        - Menu 
  x-summary: Menu
  /orders:
    get:
      tags:
      - Orders
      summary: Admin(Caterer) can get all orders
      description: Logged in admin caterer can get all orders from customers
      parameters:
      - name: Authorization
        in: header
        description: Access token required
        required: true
        type: string
      responses:
        200:
          description: Undelivered orders
        401:
          description: User is not an admin
        404:
          description: No orders have been placed yet
    post:
      tags:
      - Orders
      summary: Place an order
      description: Logged in customer can post an order
      parameters:
      - in: body
        name: Meal name
        description: Name of meal
        required: false
        schema:
          $ref: '#/definitions/AddOrder'
      - name: Authorization
        in: header
        description: Access token required
        required: true
        type: string
      responses:
        201:
          description: Order successfully added
        400:
          description: Meal name not specified
     
  /orders/<orderid>:
    x-summary: Orders
    put:
      summary: Customer can edit an order
      description: Authenticated customer can change an order
      parameters:
        - in: body
          name: Meal
          description: New meal details
          schema:
            $ref: '#/definitions/EditOrder'
        - name: access-token
          in: header
          description: Auth token in header
          required: true
          type: string
      responses:
        '200':
          description: 'Order successfully changed'
      tags:
        - Orders 
      
    
definitions:
  Register:
    type: object
    required:
      - username
      - email
      - password
    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
    example:
      username: Ngige Gitau
      email: ngigegitau@gmail.com
      password: afr0c0d3
  Login:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        default: Ngige Gitau
      password:
        type: string
        default: afr0c0d3
  SetMenu:
    type: object
    properties:
      meals:
        type: string
        default: {"1":{"name": "Chicken Mambosasa"}}
  AddMeal:
    type: object
    properties:
      name:
        type: string
      category:
        type: string
      price:
        type: number
      image_url:
        type: string
      description:
        type: string
    example:
      name: Chicken Mamboleo
      price: 200
      category: Lunch
      description: Chicken drumsticks
  EditMeal:
    type: object
    properties:
      name:
        type: string
      category:
        type: string
      price:
        type: number
      description:
        type: string
    example:
      name: Chicken Mambosasa
      price: 300
      category: Lunch
      description: Tasty chicken drumsticks
  AddOrder:
    type: object
    properties:
      meal-id:
        type: string
        example: {"1":{"name": "Chicken Mambosasa"}}
  EditOrder:
    type: object
    properties:
      name:
        type: string
      price:
        type: number
      category:
        type: string
      description:
        type: string
    example:
      name: Liver Lover
      price: 400
      category: Dinner
      description: Wet fried liver